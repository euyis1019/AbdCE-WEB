{"ast":null,"code":"import { Vector, calcPositionOrRandomFromSize, calcPositionOrRandomFromSizeRanged, getDistance, getDistances, getRandom, getRangeValue, getStyleFromRgb, isPointInside, rangeColorToRgb } from \"tsparticles-engine\";\nimport { Absorber } from \"./Options/Classes/Absorber\";\nexport class AbsorberInstance {\n  constructor(absorbers, container, options, position) {\n    this.absorbers = absorbers;\n    this.container = container;\n    this._calcPosition = () => {\n      const exactPosition = calcPositionOrRandomFromSizeRanged({\n        size: this.container.canvas.size,\n        position: this.options.position\n      });\n      return Vector.create(exactPosition.x, exactPosition.y);\n    };\n    this._updateParticlePosition = (particle, v) => {\n      if (particle.destroyed) {\n        return;\n      }\n      const container = this.container,\n        canvasSize = container.canvas.size;\n      if (particle.needsNewPosition) {\n        const newPosition = calcPositionOrRandomFromSize({\n          size: canvasSize\n        });\n        particle.position.setTo(newPosition);\n        particle.velocity.setTo(particle.initialVelocity);\n        particle.absorberOrbit = undefined;\n        particle.needsNewPosition = false;\n      }\n      if (this.options.orbits) {\n        if (particle.absorberOrbit === undefined) {\n          particle.absorberOrbit = Vector.create(0, 0);\n          particle.absorberOrbit.length = getDistance(particle.getPosition(), this.position);\n          particle.absorberOrbit.angle = getRandom() * Math.PI * 2;\n        }\n        if (particle.absorberOrbit.length <= this.size && !this.options.destroy) {\n          const minSize = Math.min(canvasSize.width, canvasSize.height);\n          particle.absorberOrbit.length = minSize * (1 + (getRandom() * 0.2 - 0.1));\n        }\n        if (particle.absorberOrbitDirection === undefined) {\n          particle.absorberOrbitDirection = particle.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\";\n        }\n        const orbitRadius = particle.absorberOrbit.length,\n          orbitAngle = particle.absorberOrbit.angle,\n          orbitDirection = particle.absorberOrbitDirection;\n        particle.velocity.setTo(Vector.origin);\n        const updateFunc = {\n          x: orbitDirection === \"clockwise\" ? Math.cos : Math.sin,\n          y: orbitDirection === \"clockwise\" ? Math.sin : Math.cos\n        };\n        particle.position.x = this.position.x + orbitRadius * updateFunc.x(orbitAngle);\n        particle.position.y = this.position.y + orbitRadius * updateFunc.y(orbitAngle);\n        particle.absorberOrbit.length -= v.length;\n        particle.absorberOrbit.angle += (particle.retina.moveSpeed ?? 0) * container.retina.pixelRatio / 100 * container.retina.reduceFactor;\n      } else {\n        const addV = Vector.origin;\n        addV.length = v.length;\n        addV.angle = v.angle;\n        particle.velocity.addTo(addV);\n      }\n    };\n    this.initialPosition = position ? Vector.create(position.x, position.y) : undefined;\n    if (options instanceof Absorber) {\n      this.options = options;\n    } else {\n      this.options = new Absorber();\n      this.options.load(options);\n    }\n    this.dragging = false;\n    this.name = this.options.name;\n    this.opacity = this.options.opacity;\n    this.size = getRangeValue(this.options.size.value) * container.retina.pixelRatio;\n    this.mass = this.size * this.options.size.density * container.retina.reduceFactor;\n    const limit = this.options.size.limit;\n    this.limit = {\n      radius: limit.radius * container.retina.pixelRatio * container.retina.reduceFactor,\n      mass: limit.mass\n    };\n    this.color = rangeColorToRgb(this.options.color) ?? {\n      b: 0,\n      g: 0,\n      r: 0\n    };\n    this.position = this.initialPosition?.copy() ?? this._calcPosition();\n  }\n  attract(particle) {\n    const container = this.container,\n      options = this.options;\n    if (options.draggable) {\n      const mouse = container.interactivity.mouse;\n      if (mouse.clicking && mouse.downPosition) {\n        const mouseDist = getDistance(this.position, mouse.downPosition);\n        if (mouseDist <= this.size) {\n          this.dragging = true;\n        }\n      } else {\n        this.dragging = false;\n      }\n      if (this.dragging && mouse.position) {\n        this.position.x = mouse.position.x;\n        this.position.y = mouse.position.y;\n      }\n    }\n    const pos = particle.getPosition(),\n      {\n        dx,\n        dy,\n        distance\n      } = getDistances(this.position, pos),\n      v = Vector.create(dx, dy);\n    v.length = this.mass / Math.pow(distance, 2) * container.retina.reduceFactor;\n    if (distance < this.size + particle.getRadius()) {\n      const sizeFactor = particle.getRadius() * 0.033 * container.retina.pixelRatio;\n      if (this.size > particle.getRadius() && distance < this.size - particle.getRadius() || particle.absorberOrbit !== undefined && particle.absorberOrbit.length < 0) {\n        if (options.destroy) {\n          particle.destroy();\n        } else {\n          particle.needsNewPosition = true;\n          this._updateParticlePosition(particle, v);\n        }\n      } else {\n        if (options.destroy) {\n          particle.size.value -= sizeFactor;\n        }\n        this._updateParticlePosition(particle, v);\n      }\n      if (this.limit.radius <= 0 || this.size < this.limit.radius) {\n        this.size += sizeFactor;\n      }\n      if (this.limit.mass <= 0 || this.mass < this.limit.mass) {\n        this.mass += sizeFactor * this.options.size.density * container.retina.reduceFactor;\n      }\n    } else {\n      this._updateParticlePosition(particle, v);\n    }\n  }\n  draw(context) {\n    context.translate(this.position.x, this.position.y);\n    context.beginPath();\n    context.arc(0, 0, this.size, 0, Math.PI * 2, false);\n    context.closePath();\n    context.fillStyle = getStyleFromRgb(this.color, this.opacity);\n    context.fill();\n  }\n  resize() {\n    const initialPosition = this.initialPosition;\n    this.position = initialPosition && isPointInside(initialPosition, this.container.canvas.size, Vector.origin) ? initialPosition : this._calcPosition();\n  }\n}","map":{"version":3,"names":["Vector","calcPositionOrRandomFromSize","calcPositionOrRandomFromSizeRanged","getDistance","getDistances","getRandom","getRangeValue","getStyleFromRgb","isPointInside","rangeColorToRgb","Absorber","AbsorberInstance","constructor","absorbers","container","options","position","_calcPosition","exactPosition","size","canvas","create","x","y","_updateParticlePosition","particle","v","destroyed","canvasSize","needsNewPosition","newPosition","setTo","velocity","initialVelocity","absorberOrbit","undefined","orbits","length","getPosition","angle","Math","PI","destroy","minSize","min","width","height","absorberOrbitDirection","orbitRadius","orbitAngle","orbitDirection","origin","updateFunc","cos","sin","retina","moveSpeed","pixelRatio","reduceFactor","addV","addTo","initialPosition","load","dragging","name","opacity","value","mass","density","limit","radius","color","b","g","r","copy","attract","draggable","mouse","interactivity","clicking","downPosition","mouseDist","pos","dx","dy","distance","pow","getRadius","sizeFactor","draw","context","translate","beginPath","arc","closePath","fillStyle","fill","resize"],"sources":["/Users/eric/Documents/GitHub/AbdCE-WEB/node_modules/tsparticles-plugin-absorbers/esm/AbsorberInstance.js"],"sourcesContent":["import { Vector, calcPositionOrRandomFromSize, calcPositionOrRandomFromSizeRanged, getDistance, getDistances, getRandom, getRangeValue, getStyleFromRgb, isPointInside, rangeColorToRgb, } from \"tsparticles-engine\";\nimport { Absorber } from \"./Options/Classes/Absorber\";\nexport class AbsorberInstance {\n    constructor(absorbers, container, options, position) {\n        this.absorbers = absorbers;\n        this.container = container;\n        this._calcPosition = () => {\n            const exactPosition = calcPositionOrRandomFromSizeRanged({\n                size: this.container.canvas.size,\n                position: this.options.position,\n            });\n            return Vector.create(exactPosition.x, exactPosition.y);\n        };\n        this._updateParticlePosition = (particle, v) => {\n            if (particle.destroyed) {\n                return;\n            }\n            const container = this.container, canvasSize = container.canvas.size;\n            if (particle.needsNewPosition) {\n                const newPosition = calcPositionOrRandomFromSize({ size: canvasSize });\n                particle.position.setTo(newPosition);\n                particle.velocity.setTo(particle.initialVelocity);\n                particle.absorberOrbit = undefined;\n                particle.needsNewPosition = false;\n            }\n            if (this.options.orbits) {\n                if (particle.absorberOrbit === undefined) {\n                    particle.absorberOrbit = Vector.create(0, 0);\n                    particle.absorberOrbit.length = getDistance(particle.getPosition(), this.position);\n                    particle.absorberOrbit.angle = getRandom() * Math.PI * 2;\n                }\n                if (particle.absorberOrbit.length <= this.size && !this.options.destroy) {\n                    const minSize = Math.min(canvasSize.width, canvasSize.height);\n                    particle.absorberOrbit.length = minSize * (1 + (getRandom() * 0.2 - 0.1));\n                }\n                if (particle.absorberOrbitDirection === undefined) {\n                    particle.absorberOrbitDirection =\n                        particle.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\";\n                }\n                const orbitRadius = particle.absorberOrbit.length, orbitAngle = particle.absorberOrbit.angle, orbitDirection = particle.absorberOrbitDirection;\n                particle.velocity.setTo(Vector.origin);\n                const updateFunc = {\n                    x: orbitDirection === \"clockwise\" ? Math.cos : Math.sin,\n                    y: orbitDirection === \"clockwise\" ? Math.sin : Math.cos,\n                };\n                particle.position.x = this.position.x + orbitRadius * updateFunc.x(orbitAngle);\n                particle.position.y = this.position.y + orbitRadius * updateFunc.y(orbitAngle);\n                particle.absorberOrbit.length -= v.length;\n                particle.absorberOrbit.angle +=\n                    (((particle.retina.moveSpeed ?? 0) * container.retina.pixelRatio) / 100) *\n                        container.retina.reduceFactor;\n            }\n            else {\n                const addV = Vector.origin;\n                addV.length = v.length;\n                addV.angle = v.angle;\n                particle.velocity.addTo(addV);\n            }\n        };\n        this.initialPosition = position ? Vector.create(position.x, position.y) : undefined;\n        if (options instanceof Absorber) {\n            this.options = options;\n        }\n        else {\n            this.options = new Absorber();\n            this.options.load(options);\n        }\n        this.dragging = false;\n        this.name = this.options.name;\n        this.opacity = this.options.opacity;\n        this.size = getRangeValue(this.options.size.value) * container.retina.pixelRatio;\n        this.mass = this.size * this.options.size.density * container.retina.reduceFactor;\n        const limit = this.options.size.limit;\n        this.limit = {\n            radius: limit.radius * container.retina.pixelRatio * container.retina.reduceFactor,\n            mass: limit.mass,\n        };\n        this.color = rangeColorToRgb(this.options.color) ?? {\n            b: 0,\n            g: 0,\n            r: 0,\n        };\n        this.position = this.initialPosition?.copy() ?? this._calcPosition();\n    }\n    attract(particle) {\n        const container = this.container, options = this.options;\n        if (options.draggable) {\n            const mouse = container.interactivity.mouse;\n            if (mouse.clicking && mouse.downPosition) {\n                const mouseDist = getDistance(this.position, mouse.downPosition);\n                if (mouseDist <= this.size) {\n                    this.dragging = true;\n                }\n            }\n            else {\n                this.dragging = false;\n            }\n            if (this.dragging && mouse.position) {\n                this.position.x = mouse.position.x;\n                this.position.y = mouse.position.y;\n            }\n        }\n        const pos = particle.getPosition(), { dx, dy, distance } = getDistances(this.position, pos), v = Vector.create(dx, dy);\n        v.length = (this.mass / Math.pow(distance, 2)) * container.retina.reduceFactor;\n        if (distance < this.size + particle.getRadius()) {\n            const sizeFactor = particle.getRadius() * 0.033 * container.retina.pixelRatio;\n            if ((this.size > particle.getRadius() && distance < this.size - particle.getRadius()) ||\n                (particle.absorberOrbit !== undefined && particle.absorberOrbit.length < 0)) {\n                if (options.destroy) {\n                    particle.destroy();\n                }\n                else {\n                    particle.needsNewPosition = true;\n                    this._updateParticlePosition(particle, v);\n                }\n            }\n            else {\n                if (options.destroy) {\n                    particle.size.value -= sizeFactor;\n                }\n                this._updateParticlePosition(particle, v);\n            }\n            if (this.limit.radius <= 0 || this.size < this.limit.radius) {\n                this.size += sizeFactor;\n            }\n            if (this.limit.mass <= 0 || this.mass < this.limit.mass) {\n                this.mass += sizeFactor * this.options.size.density * container.retina.reduceFactor;\n            }\n        }\n        else {\n            this._updateParticlePosition(particle, v);\n        }\n    }\n    draw(context) {\n        context.translate(this.position.x, this.position.y);\n        context.beginPath();\n        context.arc(0, 0, this.size, 0, Math.PI * 2, false);\n        context.closePath();\n        context.fillStyle = getStyleFromRgb(this.color, this.opacity);\n        context.fill();\n    }\n    resize() {\n        const initialPosition = this.initialPosition;\n        this.position =\n            initialPosition && isPointInside(initialPosition, this.container.canvas.size, Vector.origin)\n                ? initialPosition\n                : this._calcPosition();\n    }\n}\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,4BAA4B,EAAEC,kCAAkC,EAAEC,WAAW,EAAEC,YAAY,EAAEC,SAAS,EAAEC,aAAa,EAAEC,eAAe,EAAEC,aAAa,EAAEC,eAAe,QAAS,oBAAoB;AACpN,SAASC,QAAQ,QAAQ,4BAA4B;AACrD,OAAO,MAAMC,gBAAgB,CAAC;EAC1BC,WAAWA,CAACC,SAAS,EAAEC,SAAS,EAAEC,OAAO,EAAEC,QAAQ,EAAE;IACjD,IAAI,CAACH,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACG,aAAa,GAAG,MAAM;MACvB,MAAMC,aAAa,GAAGhB,kCAAkC,CAAC;QACrDiB,IAAI,EAAE,IAAI,CAACL,SAAS,CAACM,MAAM,CAACD,IAAI;QAChCH,QAAQ,EAAE,IAAI,CAACD,OAAO,CAACC;MAC3B,CAAC,CAAC;MACF,OAAOhB,MAAM,CAACqB,MAAM,CAACH,aAAa,CAACI,CAAC,EAAEJ,aAAa,CAACK,CAAC,CAAC;IAC1D,CAAC;IACD,IAAI,CAACC,uBAAuB,GAAG,CAACC,QAAQ,EAAEC,CAAC,KAAK;MAC5C,IAAID,QAAQ,CAACE,SAAS,EAAE;QACpB;MACJ;MACA,MAAMb,SAAS,GAAG,IAAI,CAACA,SAAS;QAAEc,UAAU,GAAGd,SAAS,CAACM,MAAM,CAACD,IAAI;MACpE,IAAIM,QAAQ,CAACI,gBAAgB,EAAE;QAC3B,MAAMC,WAAW,GAAG7B,4BAA4B,CAAC;UAAEkB,IAAI,EAAES;QAAW,CAAC,CAAC;QACtEH,QAAQ,CAACT,QAAQ,CAACe,KAAK,CAACD,WAAW,CAAC;QACpCL,QAAQ,CAACO,QAAQ,CAACD,KAAK,CAACN,QAAQ,CAACQ,eAAe,CAAC;QACjDR,QAAQ,CAACS,aAAa,GAAGC,SAAS;QAClCV,QAAQ,CAACI,gBAAgB,GAAG,KAAK;MACrC;MACA,IAAI,IAAI,CAACd,OAAO,CAACqB,MAAM,EAAE;QACrB,IAAIX,QAAQ,CAACS,aAAa,KAAKC,SAAS,EAAE;UACtCV,QAAQ,CAACS,aAAa,GAAGlC,MAAM,CAACqB,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;UAC5CI,QAAQ,CAACS,aAAa,CAACG,MAAM,GAAGlC,WAAW,CAACsB,QAAQ,CAACa,WAAW,CAAC,CAAC,EAAE,IAAI,CAACtB,QAAQ,CAAC;UAClFS,QAAQ,CAACS,aAAa,CAACK,KAAK,GAAGlC,SAAS,CAAC,CAAC,GAAGmC,IAAI,CAACC,EAAE,GAAG,CAAC;QAC5D;QACA,IAAIhB,QAAQ,CAACS,aAAa,CAACG,MAAM,IAAI,IAAI,CAAClB,IAAI,IAAI,CAAC,IAAI,CAACJ,OAAO,CAAC2B,OAAO,EAAE;UACrE,MAAMC,OAAO,GAAGH,IAAI,CAACI,GAAG,CAAChB,UAAU,CAACiB,KAAK,EAAEjB,UAAU,CAACkB,MAAM,CAAC;UAC7DrB,QAAQ,CAACS,aAAa,CAACG,MAAM,GAAGM,OAAO,IAAI,CAAC,IAAItC,SAAS,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;QAC7E;QACA,IAAIoB,QAAQ,CAACsB,sBAAsB,KAAKZ,SAAS,EAAE;UAC/CV,QAAQ,CAACsB,sBAAsB,GAC3BtB,QAAQ,CAACO,QAAQ,CAACV,CAAC,IAAI,CAAC,GAAG,WAAW,GAAG,mBAAmB;QACpE;QACA,MAAM0B,WAAW,GAAGvB,QAAQ,CAACS,aAAa,CAACG,MAAM;UAAEY,UAAU,GAAGxB,QAAQ,CAACS,aAAa,CAACK,KAAK;UAAEW,cAAc,GAAGzB,QAAQ,CAACsB,sBAAsB;QAC9ItB,QAAQ,CAACO,QAAQ,CAACD,KAAK,CAAC/B,MAAM,CAACmD,MAAM,CAAC;QACtC,MAAMC,UAAU,GAAG;UACf9B,CAAC,EAAE4B,cAAc,KAAK,WAAW,GAAGV,IAAI,CAACa,GAAG,GAAGb,IAAI,CAACc,GAAG;UACvD/B,CAAC,EAAE2B,cAAc,KAAK,WAAW,GAAGV,IAAI,CAACc,GAAG,GAAGd,IAAI,CAACa;QACxD,CAAC;QACD5B,QAAQ,CAACT,QAAQ,CAACM,CAAC,GAAG,IAAI,CAACN,QAAQ,CAACM,CAAC,GAAG0B,WAAW,GAAGI,UAAU,CAAC9B,CAAC,CAAC2B,UAAU,CAAC;QAC9ExB,QAAQ,CAACT,QAAQ,CAACO,CAAC,GAAG,IAAI,CAACP,QAAQ,CAACO,CAAC,GAAGyB,WAAW,GAAGI,UAAU,CAAC7B,CAAC,CAAC0B,UAAU,CAAC;QAC9ExB,QAAQ,CAACS,aAAa,CAACG,MAAM,IAAIX,CAAC,CAACW,MAAM;QACzCZ,QAAQ,CAACS,aAAa,CAACK,KAAK,IACtB,CAACd,QAAQ,CAAC8B,MAAM,CAACC,SAAS,IAAI,CAAC,IAAI1C,SAAS,CAACyC,MAAM,CAACE,UAAU,GAAI,GAAG,GACnE3C,SAAS,CAACyC,MAAM,CAACG,YAAY;MACzC,CAAC,MACI;QACD,MAAMC,IAAI,GAAG3D,MAAM,CAACmD,MAAM;QAC1BQ,IAAI,CAACtB,MAAM,GAAGX,CAAC,CAACW,MAAM;QACtBsB,IAAI,CAACpB,KAAK,GAAGb,CAAC,CAACa,KAAK;QACpBd,QAAQ,CAACO,QAAQ,CAAC4B,KAAK,CAACD,IAAI,CAAC;MACjC;IACJ,CAAC;IACD,IAAI,CAACE,eAAe,GAAG7C,QAAQ,GAAGhB,MAAM,CAACqB,MAAM,CAACL,QAAQ,CAACM,CAAC,EAAEN,QAAQ,CAACO,CAAC,CAAC,GAAGY,SAAS;IACnF,IAAIpB,OAAO,YAAYL,QAAQ,EAAE;MAC7B,IAAI,CAACK,OAAO,GAAGA,OAAO;IAC1B,CAAC,MACI;MACD,IAAI,CAACA,OAAO,GAAG,IAAIL,QAAQ,CAAC,CAAC;MAC7B,IAAI,CAACK,OAAO,CAAC+C,IAAI,CAAC/C,OAAO,CAAC;IAC9B;IACA,IAAI,CAACgD,QAAQ,GAAG,KAAK;IACrB,IAAI,CAACC,IAAI,GAAG,IAAI,CAACjD,OAAO,CAACiD,IAAI;IAC7B,IAAI,CAACC,OAAO,GAAG,IAAI,CAAClD,OAAO,CAACkD,OAAO;IACnC,IAAI,CAAC9C,IAAI,GAAGb,aAAa,CAAC,IAAI,CAACS,OAAO,CAACI,IAAI,CAAC+C,KAAK,CAAC,GAAGpD,SAAS,CAACyC,MAAM,CAACE,UAAU;IAChF,IAAI,CAACU,IAAI,GAAG,IAAI,CAAChD,IAAI,GAAG,IAAI,CAACJ,OAAO,CAACI,IAAI,CAACiD,OAAO,GAAGtD,SAAS,CAACyC,MAAM,CAACG,YAAY;IACjF,MAAMW,KAAK,GAAG,IAAI,CAACtD,OAAO,CAACI,IAAI,CAACkD,KAAK;IACrC,IAAI,CAACA,KAAK,GAAG;MACTC,MAAM,EAAED,KAAK,CAACC,MAAM,GAAGxD,SAAS,CAACyC,MAAM,CAACE,UAAU,GAAG3C,SAAS,CAACyC,MAAM,CAACG,YAAY;MAClFS,IAAI,EAAEE,KAAK,CAACF;IAChB,CAAC;IACD,IAAI,CAACI,KAAK,GAAG9D,eAAe,CAAC,IAAI,CAACM,OAAO,CAACwD,KAAK,CAAC,IAAI;MAChDC,CAAC,EAAE,CAAC;MACJC,CAAC,EAAE,CAAC;MACJC,CAAC,EAAE;IACP,CAAC;IACD,IAAI,CAAC1D,QAAQ,GAAG,IAAI,CAAC6C,eAAe,EAAEc,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC1D,aAAa,CAAC,CAAC;EACxE;EACA2D,OAAOA,CAACnD,QAAQ,EAAE;IACd,MAAMX,SAAS,GAAG,IAAI,CAACA,SAAS;MAAEC,OAAO,GAAG,IAAI,CAACA,OAAO;IACxD,IAAIA,OAAO,CAAC8D,SAAS,EAAE;MACnB,MAAMC,KAAK,GAAGhE,SAAS,CAACiE,aAAa,CAACD,KAAK;MAC3C,IAAIA,KAAK,CAACE,QAAQ,IAAIF,KAAK,CAACG,YAAY,EAAE;QACtC,MAAMC,SAAS,GAAG/E,WAAW,CAAC,IAAI,CAACa,QAAQ,EAAE8D,KAAK,CAACG,YAAY,CAAC;QAChE,IAAIC,SAAS,IAAI,IAAI,CAAC/D,IAAI,EAAE;UACxB,IAAI,CAAC4C,QAAQ,GAAG,IAAI;QACxB;MACJ,CAAC,MACI;QACD,IAAI,CAACA,QAAQ,GAAG,KAAK;MACzB;MACA,IAAI,IAAI,CAACA,QAAQ,IAAIe,KAAK,CAAC9D,QAAQ,EAAE;QACjC,IAAI,CAACA,QAAQ,CAACM,CAAC,GAAGwD,KAAK,CAAC9D,QAAQ,CAACM,CAAC;QAClC,IAAI,CAACN,QAAQ,CAACO,CAAC,GAAGuD,KAAK,CAAC9D,QAAQ,CAACO,CAAC;MACtC;IACJ;IACA,MAAM4D,GAAG,GAAG1D,QAAQ,CAACa,WAAW,CAAC,CAAC;MAAE;QAAE8C,EAAE;QAAEC,EAAE;QAAEC;MAAS,CAAC,GAAGlF,YAAY,CAAC,IAAI,CAACY,QAAQ,EAAEmE,GAAG,CAAC;MAAEzD,CAAC,GAAG1B,MAAM,CAACqB,MAAM,CAAC+D,EAAE,EAAEC,EAAE,CAAC;IACtH3D,CAAC,CAACW,MAAM,GAAI,IAAI,CAAC8B,IAAI,GAAG3B,IAAI,CAAC+C,GAAG,CAACD,QAAQ,EAAE,CAAC,CAAC,GAAIxE,SAAS,CAACyC,MAAM,CAACG,YAAY;IAC9E,IAAI4B,QAAQ,GAAG,IAAI,CAACnE,IAAI,GAAGM,QAAQ,CAAC+D,SAAS,CAAC,CAAC,EAAE;MAC7C,MAAMC,UAAU,GAAGhE,QAAQ,CAAC+D,SAAS,CAAC,CAAC,GAAG,KAAK,GAAG1E,SAAS,CAACyC,MAAM,CAACE,UAAU;MAC7E,IAAK,IAAI,CAACtC,IAAI,GAAGM,QAAQ,CAAC+D,SAAS,CAAC,CAAC,IAAIF,QAAQ,GAAG,IAAI,CAACnE,IAAI,GAAGM,QAAQ,CAAC+D,SAAS,CAAC,CAAC,IAC/E/D,QAAQ,CAACS,aAAa,KAAKC,SAAS,IAAIV,QAAQ,CAACS,aAAa,CAACG,MAAM,GAAG,CAAE,EAAE;QAC7E,IAAItB,OAAO,CAAC2B,OAAO,EAAE;UACjBjB,QAAQ,CAACiB,OAAO,CAAC,CAAC;QACtB,CAAC,MACI;UACDjB,QAAQ,CAACI,gBAAgB,GAAG,IAAI;UAChC,IAAI,CAACL,uBAAuB,CAACC,QAAQ,EAAEC,CAAC,CAAC;QAC7C;MACJ,CAAC,MACI;QACD,IAAIX,OAAO,CAAC2B,OAAO,EAAE;UACjBjB,QAAQ,CAACN,IAAI,CAAC+C,KAAK,IAAIuB,UAAU;QACrC;QACA,IAAI,CAACjE,uBAAuB,CAACC,QAAQ,EAAEC,CAAC,CAAC;MAC7C;MACA,IAAI,IAAI,CAAC2C,KAAK,CAACC,MAAM,IAAI,CAAC,IAAI,IAAI,CAACnD,IAAI,GAAG,IAAI,CAACkD,KAAK,CAACC,MAAM,EAAE;QACzD,IAAI,CAACnD,IAAI,IAAIsE,UAAU;MAC3B;MACA,IAAI,IAAI,CAACpB,KAAK,CAACF,IAAI,IAAI,CAAC,IAAI,IAAI,CAACA,IAAI,GAAG,IAAI,CAACE,KAAK,CAACF,IAAI,EAAE;QACrD,IAAI,CAACA,IAAI,IAAIsB,UAAU,GAAG,IAAI,CAAC1E,OAAO,CAACI,IAAI,CAACiD,OAAO,GAAGtD,SAAS,CAACyC,MAAM,CAACG,YAAY;MACvF;IACJ,CAAC,MACI;MACD,IAAI,CAAClC,uBAAuB,CAACC,QAAQ,EAAEC,CAAC,CAAC;IAC7C;EACJ;EACAgE,IAAIA,CAACC,OAAO,EAAE;IACVA,OAAO,CAACC,SAAS,CAAC,IAAI,CAAC5E,QAAQ,CAACM,CAAC,EAAE,IAAI,CAACN,QAAQ,CAACO,CAAC,CAAC;IACnDoE,OAAO,CAACE,SAAS,CAAC,CAAC;IACnBF,OAAO,CAACG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC3E,IAAI,EAAE,CAAC,EAAEqB,IAAI,CAACC,EAAE,GAAG,CAAC,EAAE,KAAK,CAAC;IACnDkD,OAAO,CAACI,SAAS,CAAC,CAAC;IACnBJ,OAAO,CAACK,SAAS,GAAGzF,eAAe,CAAC,IAAI,CAACgE,KAAK,EAAE,IAAI,CAACN,OAAO,CAAC;IAC7D0B,OAAO,CAACM,IAAI,CAAC,CAAC;EAClB;EACAC,MAAMA,CAAA,EAAG;IACL,MAAMrC,eAAe,GAAG,IAAI,CAACA,eAAe;IAC5C,IAAI,CAAC7C,QAAQ,GACT6C,eAAe,IAAIrD,aAAa,CAACqD,eAAe,EAAE,IAAI,CAAC/C,SAAS,CAACM,MAAM,CAACD,IAAI,EAAEnB,MAAM,CAACmD,MAAM,CAAC,GACtFU,eAAe,GACf,IAAI,CAAC5C,aAAa,CAAC,CAAC;EAClC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}