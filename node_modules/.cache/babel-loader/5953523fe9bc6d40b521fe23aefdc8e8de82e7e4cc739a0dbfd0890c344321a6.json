{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, withCtx as _withCtx, createTextVNode as _createTextVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"formContainer\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h3\", null, \"华南师范大学阿伯丁数据科学与人工智能学院综测填报系统网站\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache) {\n  const _component_Particles = _resolveComponent(\"Particles\");\n  const _component_el_input = _resolveComponent(\"el-input\");\n  const _component_el_form_item = _resolveComponent(\"el-form-item\");\n  const _component_el_button = _resolveComponent(\"el-button\");\n  const _component_el_form = _resolveComponent(\"el-form\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", null, [_createCommentVNode(\" 配置粒子展示 \"), _createVNode(_component_Particles, {\n    id: \"tsparticles\",\n    particlesInit: _ctx.particlesInit,\n    options: _ctx.options\n  }, null, 8 /* PROPS */, [\"particlesInit\", \"options\"]), _createCommentVNode(\" 登录表单验证 \"), _createElementVNode(\"div\", _hoisted_1, [_hoisted_2, _createVNode(_component_el_form, {\n    ref: \"loginFormRef\",\n    model: _ctx.loginForm,\n    \"status-icon\": \"\",\n    rules: _ctx.loginRules,\n    \"label-width\": \"80px\",\n    class: \"loginform\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_el_form_item, {\n      label: \"用户名\",\n      prop: \"username\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_input, {\n        modelValue: _ctx.loginForm.username,\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.loginForm.username = $event),\n        autocomplete: \"off\"\n      }, null, 8 /* PROPS */, [\"modelValue\"])]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_form_item, {\n      label: \"密码\",\n      prop: \"password\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_input, {\n        modelValue: _ctx.loginForm.password,\n        \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.loginForm.password = $event),\n        type: \"password\",\n        autocomplete: \"off\"\n      }, null, 8 /* PROPS */, [\"modelValue\"])]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_form_item, null, {\n      default: _withCtx(() => [_createVNode(_component_el_button, {\n        type: \"primary\",\n        onClick: _cache[2] || (_cache[2] = $event => _ctx.submitForm())\n      }, {\n        default: _withCtx(() => [_createTextVNode(\"登录\")]),\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"model\", \"rules\"])])]), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => _ctx.handleLogin && _ctx.handleLogin(...args))\n  }, \"ForTest\")], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["class","_createElementVNode","_createCommentVNode","_createVNode","_component_Particles","id","particlesInit","_ctx","options","_hoisted_1","_hoisted_2","_component_el_form","ref","model","loginForm","rules","loginRules","_component_el_form_item","label","prop","_component_el_input","username","$event","autocomplete","password","type","_component_el_button","onClick","_cache","submitForm","args","handleLogin"],"sources":["/Users/eric/Documents/GitHub/AbdCE-WEB/src/views/Login.vue"],"sourcesContent":["<template>\n    <div>\n      <!-- 配置粒子展示 -->\n        <Particles\n            id=\"tsparticles\"\n            :particlesInit=\"particlesInit\"\n            :options=\"options\"\n        />\n  \n        <!-- 登录表单验证 -->\n        <div class=\"formContainer\">\n            <h3>华南师范大学阿伯丁数据科学与人工智能学院综测填报系统网站</h3>\n            <el-form\n                ref=\"loginFormRef\"\n                :model=\"loginForm\"\n                status-icon\n                :rules=\"loginRules\"\n                label-width=\"80px\"\n                class=\"loginform\"\n            >\n                <el-form-item\n                    label=\"用户名\"\n                    prop=\"username\"\n                >\n                    <el-input\n                        v-model=\"loginForm.username\"\n  \n                        autocomplete=\"off\"\n                    />\n                </el-form-item>\n                <el-form-item\n                    label=\"密码\"\n                    prop=\"password\"\n                >\n                    <el-input\n                        v-model=\"loginForm.password\"\n                        type=\"password\"\n                        autocomplete=\"off\"\n                    />\n                </el-form-item>\n                <el-form-item>\n                    <el-button\n                        type=\"primary\"\n                        @click=\"submitForm()\"\n                    >登录</el-button>  \n                </el-form-item>\n            </el-form>\n        </div>\n    </div>\n    <button @click=\"handleLogin\">ForTest</button>\n  </template>\n\n\n\n\n\n<script setup>\nimport {reactive,ref} from 'vue'\nimport {useRouter} from 'vue-router'\n//import axios from 'axios'// 引入axios\nimport { ElMessage } from 'element-plus'//消息提醒框\nimport {useStore } from 'vuex' // 引入全局store\n\nconst store = useStore()\n\n// 表单绑定的响应式对象\nconst loginForm = reactive({\n  username:\"\",\n  password:\"\"\n})\nconst loginFormRef = ref() //表单的引用对象\n\n// 配置表单的验证规则\nconst loginRules = reactive({\n  username:[// 用户名\n    {\n      // 必须填入,表单提示,触发方式:失去焦点(判断是否通过表单验证)\n      required:true,message:\"请输入用户名\",trigger:\"blur\"\n    }\n  ],\n  password:[// 密码\n    {\n      required:true,message:\"请输入密码\",trigger:\"blur\"\n    }\n  ]\n})\n\n// 引入路由\nconst router = useRouter()\n//提交表单函数\nconst submitForm = ()=>{\n  //1. 校验表单(获取输入的表单数据)[validate为elementPlus中表单验证内置方法]\n  loginFormRef.value.validate((valid)=>{\n      console.log('判断输入的数据是否通过表单校验:',valid)// 手动校验表单是否有值\n      if(valid){\n          console.log('成功获取到表单内容:',loginForm)\n          axios.post('/adminapi/user/login',loginForm).then(res=>{\n            console.log(res.data);\n            // 登录校验\n            if(res.data.ActionType === 'OK'){\n              // console.log('返回的用户数据',res.data.data);\n              store.commit(\"changeUserInfo\",res.data.data)// 将用户信息保存到vuex中\n              store.commit(\"changeGetterRouter\",false)\n              router.push(\"/Report\")//路由跳转\n              // localStorage.setItem(\"token\", \"lam\");//色湖之token\n            }else{\n              ElMessage.error('用户名和密码不匹配')\n            }\n          })\n      }\n  })\n  //2. 拿到表单内容,提交后台\n\n  //3. 设置token\n  /*localStorage.setItem(\"token\", \"lam\");\nconst handleLogin = ()=>{\n    localStorage.setItem(\"token\",\"ForTest\")\n};\n\n}\n</script>\n\n"],"mappings":";;EAUaA,KAAK,EAAC;AAAe;gCACtBC,mBAAA,CAAqC,YAAjC,8BAA4B;;;;;;;;6DAVxCA,mBAAA,CA+CM,cA9CJC,mBAAA,YAAe,EACbC,YAAA,CAIEC,oBAAA;IAHEC,EAAE,EAAC,aAAa;IACfC,aAAa,EAAEC,IAAA,CAAAD,aAAa;IAC5BE,OAAO,EAAED,IAAA,CAAAC;yDAGdN,mBAAA,YAAe,EACfD,mBAAA,CAqCM,OArCNQ,UAqCM,GApCFC,UAAqC,EACrCP,YAAA,CAkCUQ,kBAAA;IAjCNC,GAAG,EAAC,cAAc;IACjBC,KAAK,EAAEN,IAAA,CAAAO,SAAS;IACjB,aAAW,EAAX,EAAW;IACVC,KAAK,EAAER,IAAA,CAAAS,UAAU;IAClB,aAAW,EAAC,MAAM;IAClBhB,KAAK,EAAC;;sBAEN,MASe,CATfG,YAAA,CASec,uBAAA;MARXC,KAAK,EAAC,KAAK;MACXC,IAAI,EAAC;;wBAEL,MAIE,CAJFhB,YAAA,CAIEiB,mBAAA;oBAHWb,IAAA,CAAAO,SAAS,CAACO,QAAQ;mEAAlBd,IAAA,CAAAO,SAAS,CAACO,QAAQ,GAAAC,MAAA;QAE3BC,YAAY,EAAC;;;QAGrBpB,YAAA,CASec,uBAAA;MARXC,KAAK,EAAC,IAAI;MACVC,IAAI,EAAC;;wBAEL,MAIE,CAJFhB,YAAA,CAIEiB,mBAAA;oBAHWb,IAAA,CAAAO,SAAS,CAACU,QAAQ;mEAAlBjB,IAAA,CAAAO,SAAS,CAACU,QAAQ,GAAAF,MAAA;QAC3BG,IAAI,EAAC,UAAU;QACfF,YAAY,EAAC;;;QAGrBpB,YAAA,CAKec,uBAAA;wBAJX,MAGe,CAHfd,YAAA,CAGeuB,oBAAA;QAFXD,IAAI,EAAC,SAAS;QACbE,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAN,MAAA,IAAEf,IAAA,CAAAsB,UAAU;;0BACrB,MAAE,C,iBAAF,IAAE,E;;;;;;;;6CAKnB5B,mBAAA,CAA6C;IAApC0B,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAE,IAAA,KAAEvB,IAAA,CAAAwB,WAAA,IAAAxB,IAAA,CAAAwB,WAAA,IAAAD,IAAA,CAAW;KAAE,SAAO,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}