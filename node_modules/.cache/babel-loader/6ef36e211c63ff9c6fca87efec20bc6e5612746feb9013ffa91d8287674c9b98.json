{"ast":null,"code":"import { Vector, calcPositionOrRandomFromSizeRanged, deepExtend, getRangeValue, getSize, isPointInside, itemFromSingleOrMultiple, randomInRange, rangeColorToHsl } from \"tsparticles-engine\";\nimport { Emitter } from \"./Options/Classes/Emitter\";\nimport { EmitterSize } from \"./Options/Classes/EmitterSize\";\nexport class EmitterInstance {\n  constructor(engine, emitters, container, options, position) {\n    this.emitters = emitters;\n    this.container = container;\n    this._calcPosition = () => {\n      return calcPositionOrRandomFromSizeRanged({\n        size: this.container.canvas.size,\n        position: this.options.position\n      });\n    };\n    this._destroy = () => {\n      this.emitters.removeEmitter(this);\n      this._engine.dispatchEvent(\"emitterDestroyed\", {\n        container: this.container,\n        data: {\n          emitter: this\n        }\n      });\n    };\n    this._emit = () => {\n      if (this._paused) {\n        return;\n      }\n      const quantity = getRangeValue(this.options.rate.quantity);\n      this._emitParticles(quantity);\n    };\n    this._emitParticles = quantity => {\n      const position = this.getPosition(),\n        size = this.getSize(),\n        singleParticlesOptions = itemFromSingleOrMultiple(this._particlesOptions);\n      for (let i = 0; i < quantity; i++) {\n        const particlesOptions = deepExtend({}, singleParticlesOptions);\n        if (this.spawnColor) {\n          const hslAnimation = this.options.spawnColor?.animation;\n          if (hslAnimation) {\n            this.spawnColor.h = this._setColorAnimation(hslAnimation.h, this.spawnColor.h, 360);\n            this.spawnColor.s = this._setColorAnimation(hslAnimation.s, this.spawnColor.s, 100);\n            this.spawnColor.l = this._setColorAnimation(hslAnimation.l, this.spawnColor.l, 100);\n          }\n          if (!particlesOptions.color) {\n            particlesOptions.color = {\n              value: this.spawnColor\n            };\n          } else {\n            particlesOptions.color.value = this.spawnColor;\n          }\n        }\n        if (!position) {\n          return;\n        }\n        const pPosition = this._shape?.randomPosition(position, size, this.fill) ?? position;\n        this.container.particles.addParticle(pPosition, particlesOptions);\n      }\n    };\n    this._prepareToDie = () => {\n      if (this._paused) {\n        return;\n      }\n      const duration = this.options.life?.duration !== undefined ? getRangeValue(this.options.life.duration) : undefined;\n      if (this.container.retina.reduceFactor && (this._lifeCount > 0 || this._immortal) && duration !== undefined && duration > 0) {\n        this._duration = duration * 1000;\n      }\n    };\n    this._setColorAnimation = (animation, initValue, maxValue) => {\n      const container = this.container;\n      if (!animation.enable) {\n        return initValue;\n      }\n      const colorOffset = randomInRange(animation.offset),\n        delay = getRangeValue(this.options.rate.delay),\n        emitFactor = 1000 * delay / container.retina.reduceFactor,\n        colorSpeed = getRangeValue(animation.speed ?? 0);\n      return (initValue + colorSpeed * container.fpsLimit / emitFactor + colorOffset * 3.6) % maxValue;\n    };\n    this._engine = engine;\n    this._currentDuration = 0;\n    this._currentEmitDelay = 0;\n    this._currentSpawnDelay = 0;\n    this._initialPosition = position;\n    if (options instanceof Emitter) {\n      this.options = options;\n    } else {\n      this.options = new Emitter();\n      this.options.load(options);\n    }\n    this._spawnDelay = getRangeValue(this.options.life.delay ?? 0) * 1000 / this.container.retina.reduceFactor;\n    this.position = this._initialPosition ?? this._calcPosition();\n    this.name = this.options.name;\n    this._shape = this._engine.emitterShapeManager?.getShape(this.options.shape);\n    this.fill = this.options.fill;\n    this._firstSpawn = !this.options.life.wait;\n    this._startParticlesAdded = false;\n    let particlesOptions = deepExtend({}, this.options.particles);\n    particlesOptions ??= {};\n    particlesOptions.move ??= {};\n    particlesOptions.move.direction ??= this.options.direction;\n    if (this.options.spawnColor) {\n      this.spawnColor = rangeColorToHsl(this.options.spawnColor);\n    }\n    this._paused = !this.options.autoPlay;\n    this._particlesOptions = particlesOptions;\n    this.size = this.options.size ?? (() => {\n      const size = new EmitterSize();\n      size.load({\n        height: 0,\n        mode: \"percent\",\n        width: 0\n      });\n      return size;\n    })();\n    this._lifeCount = this.options.life.count ?? -1;\n    this._immortal = this._lifeCount <= 0;\n    this._engine.dispatchEvent(\"emitterCreated\", {\n      container,\n      data: {\n        emitter: this\n      }\n    });\n    this.play();\n  }\n  externalPause() {\n    this._paused = true;\n    this.pause();\n  }\n  externalPlay() {\n    this._paused = false;\n    this.play();\n  }\n  getPosition() {\n    if (this.options.domId) {\n      const container = this.container,\n        element = document.getElementById(this.options.domId);\n      if (element) {\n        const elRect = element.getBoundingClientRect();\n        return {\n          x: (elRect.x + elRect.width / 2) * container.retina.pixelRatio,\n          y: (elRect.y + elRect.height / 2) * container.retina.pixelRatio\n        };\n      }\n    }\n    return this.position;\n  }\n  getSize() {\n    const container = this.container;\n    if (this.options.domId) {\n      const element = document.getElementById(this.options.domId);\n      if (element) {\n        const elRect = element.getBoundingClientRect();\n        return {\n          width: elRect.width * container.retina.pixelRatio,\n          height: elRect.height * container.retina.pixelRatio\n        };\n      }\n    }\n    return getSize(this.size, container.canvas.size);\n  }\n  pause() {\n    if (this._paused) {\n      return;\n    }\n    delete this._emitDelay;\n  }\n  play() {\n    if (this._paused) {\n      return;\n    }\n    if (!(this.container.retina.reduceFactor && (this._lifeCount > 0 || this._immortal || !this.options.life.count) && (this._firstSpawn || this._currentSpawnDelay >= (this._spawnDelay ?? 0)))) {\n      return;\n    }\n    if (this._emitDelay === undefined) {\n      const delay = getRangeValue(this.options.rate.delay);\n      this._emitDelay = 1000 * delay / this.container.retina.reduceFactor;\n    }\n    if (this._lifeCount > 0 || this._immortal) {\n      this._prepareToDie();\n    }\n  }\n  resize() {\n    const initialPosition = this._initialPosition;\n    this.position = initialPosition && isPointInside(initialPosition, this.container.canvas.size, Vector.origin) ? initialPosition : this._calcPosition();\n  }\n  update(delta) {\n    if (this._paused) {\n      return;\n    }\n    if (this._firstSpawn) {\n      this._firstSpawn = false;\n      this._currentSpawnDelay = this._spawnDelay ?? 0;\n      this._currentEmitDelay = this._emitDelay ?? 0;\n    }\n    if (!this._startParticlesAdded) {\n      this._startParticlesAdded = true;\n      this._emitParticles(this.options.startCount);\n    }\n    if (this._duration !== undefined) {\n      this._currentDuration += delta.value;\n      if (this._currentDuration >= this._duration) {\n        this.pause();\n        if (this._spawnDelay !== undefined) {\n          delete this._spawnDelay;\n        }\n        if (!this._immortal) {\n          this._lifeCount--;\n        }\n        if (this._lifeCount > 0 || this._immortal) {\n          this.position = this._calcPosition();\n          this._spawnDelay = getRangeValue(this.options.life.delay ?? 0) * 1000 / this.container.retina.reduceFactor;\n        } else {\n          this._destroy();\n        }\n        this._currentDuration -= this._duration;\n        delete this._duration;\n      }\n    }\n    if (this._spawnDelay !== undefined) {\n      this._currentSpawnDelay += delta.value;\n      if (this._currentSpawnDelay >= this._spawnDelay) {\n        this._engine.dispatchEvent(\"emitterPlay\", {\n          container: this.container\n        });\n        this.play();\n        this._currentSpawnDelay -= this._currentSpawnDelay;\n        delete this._spawnDelay;\n      }\n    }\n    if (this._emitDelay !== undefined) {\n      this._currentEmitDelay += delta.value;\n      if (this._currentEmitDelay >= this._emitDelay) {\n        this._emit();\n        this._currentEmitDelay -= this._emitDelay;\n      }\n    }\n  }\n}","map":{"version":3,"names":["Vector","calcPositionOrRandomFromSizeRanged","deepExtend","getRangeValue","getSize","isPointInside","itemFromSingleOrMultiple","randomInRange","rangeColorToHsl","Emitter","EmitterSize","EmitterInstance","constructor","engine","emitters","container","options","position","_calcPosition","size","canvas","_destroy","removeEmitter","_engine","dispatchEvent","data","emitter","_emit","_paused","quantity","rate","_emitParticles","getPosition","singleParticlesOptions","_particlesOptions","i","particlesOptions","spawnColor","hslAnimation","animation","h","_setColorAnimation","s","l","color","value","pPosition","_shape","randomPosition","fill","particles","addParticle","_prepareToDie","duration","life","undefined","retina","reduceFactor","_lifeCount","_immortal","_duration","initValue","maxValue","enable","colorOffset","offset","delay","emitFactor","colorSpeed","speed","fpsLimit","_currentDuration","_currentEmitDelay","_currentSpawnDelay","_initialPosition","load","_spawnDelay","name","emitterShapeManager","getShape","shape","_firstSpawn","wait","_startParticlesAdded","move","direction","autoPlay","height","mode","width","count","play","externalPause","pause","externalPlay","domId","element","document","getElementById","elRect","getBoundingClientRect","x","pixelRatio","y","_emitDelay","resize","initialPosition","origin","update","delta","startCount"],"sources":["/Users/eric/Documents/GitHub/AbdCE-WEB/node_modules/tsparticles-plugin-emitters/esm/EmitterInstance.js"],"sourcesContent":["import { Vector, calcPositionOrRandomFromSizeRanged, deepExtend, getRangeValue, getSize, isPointInside, itemFromSingleOrMultiple, randomInRange, rangeColorToHsl, } from \"tsparticles-engine\";\nimport { Emitter } from \"./Options/Classes/Emitter\";\nimport { EmitterSize } from \"./Options/Classes/EmitterSize\";\nexport class EmitterInstance {\n    constructor(engine, emitters, container, options, position) {\n        this.emitters = emitters;\n        this.container = container;\n        this._calcPosition = () => {\n            return calcPositionOrRandomFromSizeRanged({\n                size: this.container.canvas.size,\n                position: this.options.position,\n            });\n        };\n        this._destroy = () => {\n            this.emitters.removeEmitter(this);\n            this._engine.dispatchEvent(\"emitterDestroyed\", {\n                container: this.container,\n                data: {\n                    emitter: this,\n                },\n            });\n        };\n        this._emit = () => {\n            if (this._paused) {\n                return;\n            }\n            const quantity = getRangeValue(this.options.rate.quantity);\n            this._emitParticles(quantity);\n        };\n        this._emitParticles = (quantity) => {\n            const position = this.getPosition(), size = this.getSize(), singleParticlesOptions = itemFromSingleOrMultiple(this._particlesOptions);\n            for (let i = 0; i < quantity; i++) {\n                const particlesOptions = deepExtend({}, singleParticlesOptions);\n                if (this.spawnColor) {\n                    const hslAnimation = this.options.spawnColor?.animation;\n                    if (hslAnimation) {\n                        this.spawnColor.h = this._setColorAnimation(hslAnimation.h, this.spawnColor.h, 360);\n                        this.spawnColor.s = this._setColorAnimation(hslAnimation.s, this.spawnColor.s, 100);\n                        this.spawnColor.l = this._setColorAnimation(hslAnimation.l, this.spawnColor.l, 100);\n                    }\n                    if (!particlesOptions.color) {\n                        particlesOptions.color = {\n                            value: this.spawnColor,\n                        };\n                    }\n                    else {\n                        particlesOptions.color.value = this.spawnColor;\n                    }\n                }\n                if (!position) {\n                    return;\n                }\n                const pPosition = this._shape?.randomPosition(position, size, this.fill) ?? position;\n                this.container.particles.addParticle(pPosition, particlesOptions);\n            }\n        };\n        this._prepareToDie = () => {\n            if (this._paused) {\n                return;\n            }\n            const duration = this.options.life?.duration !== undefined ? getRangeValue(this.options.life.duration) : undefined;\n            if (this.container.retina.reduceFactor &&\n                (this._lifeCount > 0 || this._immortal) &&\n                duration !== undefined &&\n                duration > 0) {\n                this._duration = duration * 1000;\n            }\n        };\n        this._setColorAnimation = (animation, initValue, maxValue) => {\n            const container = this.container;\n            if (!animation.enable) {\n                return initValue;\n            }\n            const colorOffset = randomInRange(animation.offset), delay = getRangeValue(this.options.rate.delay), emitFactor = (1000 * delay) / container.retina.reduceFactor, colorSpeed = getRangeValue(animation.speed ?? 0);\n            return (initValue + (colorSpeed * container.fpsLimit) / emitFactor + colorOffset * 3.6) % maxValue;\n        };\n        this._engine = engine;\n        this._currentDuration = 0;\n        this._currentEmitDelay = 0;\n        this._currentSpawnDelay = 0;\n        this._initialPosition = position;\n        if (options instanceof Emitter) {\n            this.options = options;\n        }\n        else {\n            this.options = new Emitter();\n            this.options.load(options);\n        }\n        this._spawnDelay = (getRangeValue(this.options.life.delay ?? 0) * 1000) / this.container.retina.reduceFactor;\n        this.position = this._initialPosition ?? this._calcPosition();\n        this.name = this.options.name;\n        this._shape = this._engine.emitterShapeManager?.getShape(this.options.shape);\n        this.fill = this.options.fill;\n        this._firstSpawn = !this.options.life.wait;\n        this._startParticlesAdded = false;\n        let particlesOptions = deepExtend({}, this.options.particles);\n        particlesOptions ??= {};\n        particlesOptions.move ??= {};\n        particlesOptions.move.direction ??= this.options.direction;\n        if (this.options.spawnColor) {\n            this.spawnColor = rangeColorToHsl(this.options.spawnColor);\n        }\n        this._paused = !this.options.autoPlay;\n        this._particlesOptions = particlesOptions;\n        this.size =\n            this.options.size ??\n                (() => {\n                    const size = new EmitterSize();\n                    size.load({\n                        height: 0,\n                        mode: \"percent\",\n                        width: 0,\n                    });\n                    return size;\n                })();\n        this._lifeCount = this.options.life.count ?? -1;\n        this._immortal = this._lifeCount <= 0;\n        this._engine.dispatchEvent(\"emitterCreated\", {\n            container,\n            data: {\n                emitter: this,\n            },\n        });\n        this.play();\n    }\n    externalPause() {\n        this._paused = true;\n        this.pause();\n    }\n    externalPlay() {\n        this._paused = false;\n        this.play();\n    }\n    getPosition() {\n        if (this.options.domId) {\n            const container = this.container, element = document.getElementById(this.options.domId);\n            if (element) {\n                const elRect = element.getBoundingClientRect();\n                return {\n                    x: (elRect.x + elRect.width / 2) * container.retina.pixelRatio,\n                    y: (elRect.y + elRect.height / 2) * container.retina.pixelRatio,\n                };\n            }\n        }\n        return this.position;\n    }\n    getSize() {\n        const container = this.container;\n        if (this.options.domId) {\n            const element = document.getElementById(this.options.domId);\n            if (element) {\n                const elRect = element.getBoundingClientRect();\n                return {\n                    width: elRect.width * container.retina.pixelRatio,\n                    height: elRect.height * container.retina.pixelRatio,\n                };\n            }\n        }\n        return getSize(this.size, container.canvas.size);\n    }\n    pause() {\n        if (this._paused) {\n            return;\n        }\n        delete this._emitDelay;\n    }\n    play() {\n        if (this._paused) {\n            return;\n        }\n        if (!(this.container.retina.reduceFactor &&\n            (this._lifeCount > 0 || this._immortal || !this.options.life.count) &&\n            (this._firstSpawn || this._currentSpawnDelay >= (this._spawnDelay ?? 0)))) {\n            return;\n        }\n        if (this._emitDelay === undefined) {\n            const delay = getRangeValue(this.options.rate.delay);\n            this._emitDelay = (1000 * delay) / this.container.retina.reduceFactor;\n        }\n        if (this._lifeCount > 0 || this._immortal) {\n            this._prepareToDie();\n        }\n    }\n    resize() {\n        const initialPosition = this._initialPosition;\n        this.position =\n            initialPosition && isPointInside(initialPosition, this.container.canvas.size, Vector.origin)\n                ? initialPosition\n                : this._calcPosition();\n    }\n    update(delta) {\n        if (this._paused) {\n            return;\n        }\n        if (this._firstSpawn) {\n            this._firstSpawn = false;\n            this._currentSpawnDelay = this._spawnDelay ?? 0;\n            this._currentEmitDelay = this._emitDelay ?? 0;\n        }\n        if (!this._startParticlesAdded) {\n            this._startParticlesAdded = true;\n            this._emitParticles(this.options.startCount);\n        }\n        if (this._duration !== undefined) {\n            this._currentDuration += delta.value;\n            if (this._currentDuration >= this._duration) {\n                this.pause();\n                if (this._spawnDelay !== undefined) {\n                    delete this._spawnDelay;\n                }\n                if (!this._immortal) {\n                    this._lifeCount--;\n                }\n                if (this._lifeCount > 0 || this._immortal) {\n                    this.position = this._calcPosition();\n                    this._spawnDelay =\n                        (getRangeValue(this.options.life.delay ?? 0) * 1000) / this.container.retina.reduceFactor;\n                }\n                else {\n                    this._destroy();\n                }\n                this._currentDuration -= this._duration;\n                delete this._duration;\n            }\n        }\n        if (this._spawnDelay !== undefined) {\n            this._currentSpawnDelay += delta.value;\n            if (this._currentSpawnDelay >= this._spawnDelay) {\n                this._engine.dispatchEvent(\"emitterPlay\", {\n                    container: this.container,\n                });\n                this.play();\n                this._currentSpawnDelay -= this._currentSpawnDelay;\n                delete this._spawnDelay;\n            }\n        }\n        if (this._emitDelay !== undefined) {\n            this._currentEmitDelay += delta.value;\n            if (this._currentEmitDelay >= this._emitDelay) {\n                this._emit();\n                this._currentEmitDelay -= this._emitDelay;\n            }\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}