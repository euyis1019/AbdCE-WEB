{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { reactive, ref } from 'vue';\nimport { useRouter } from 'vue-router';\n//import axios from 'axios'// 引入axios\nimport { ElMessage } from 'element-plus'; //消息提醒框\nimport { useStore } from 'vuex'; // 引入全局store\n\nexport default {\n  __name: 'Login',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const store = useStore();\n    const handleLogin = () => {\n      localStorage.setItem(\"token\", \"ForTest\");\n    };\n\n    // 表单绑定的响应式对象\n    const loginForm = reactive({\n      username: \"\",\n      password: \"\"\n    });\n    const loginFormRef = ref(); //表单的引用对象\n\n    // 配置表单的验证规则\n    const loginRules = reactive({\n      username: [\n      // 用户名\n      {\n        // 必须填入,表单提示,触发方式:失去焦点(判断是否通过表单验证)\n        required: true,\n        message: \"请输入用户名\",\n        trigger: \"blur\"\n      }],\n      password: [\n      // 密码\n      {\n        required: true,\n        message: \"请输入密码\",\n        trigger: \"blur\"\n      }]\n    });\n\n    // 引入路由\n    const router = useRouter();\n    //提交表单函数\n    const submitForm = () => {\n      //1. 校验表单(获取输入的表单数据)[validate为elementPlus中表单验证内置方法]\n      loginFormRef.value.validate(valid => {\n        console.log('判断输入的数据是否通过表单校验:', valid); // 手动校验表单是否有值\n        if (valid) {\n          console.log('成功获取到表单内容:', loginForm);\n          axios.post('/adminapi/user/login', loginForm).then(res => {\n            console.log(res.data);\n            // 登录校验\n            if (res.data.ActionType === 'OK') {\n              // console.log('返回的用户数据',res.data.data);\n              //store.commit(\"changeUserInfo\",res.data.data)// 将用户信息保存到vuex中\n              //store.commit(\"changeGetterRouter\",false)\n              router.push(\"/Report\"); //路由跳转\n              // localStorage.setItem(\"token\", \"lam\");//色湖之token\n            } else {\n              ElMessage.error('用户名和密码不匹配');\n            }\n          });\n        }\n      });\n      //2. 拿到表单内容,提交后台\n\n      //3. 设置token\n      /*localStorage.setItem(\"token\", \"lam\");*/\n    };\n\n    const __returned__ = {\n      store,\n      handleLogin,\n      loginForm,\n      loginFormRef,\n      loginRules,\n      router,\n      submitForm,\n      reactive,\n      ref,\n      get useRouter() {\n        return useRouter;\n      },\n      get ElMessage() {\n        return ElMessage;\n      },\n      get useStore() {\n        return useStore;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["reactive","ref","useRouter","ElMessage","useStore","store","handleLogin","localStorage","setItem","loginForm","username","password","loginFormRef","loginRules","required","message","trigger","router","submitForm","value","validate","valid","console","log","axios","post","then","res","data","ActionType","push","error"],"sources":["/Users/eric/Documents/GitHub/AbdCE-WEB/src/views/Login.vue"],"sourcesContent":["<template>\n    <div>\n      <!-- 配置粒子展示 -->\n        <Particles\n            id=\"tsparticles\"\n            :particlesInit=\"particlesInit\"\n            :options=\"options\"\n        />\n  \n        <!-- 登录表单验证 -->\n        <div class=\"formContainer\">\n            <h3>华南师范大学阿伯丁数据科学与人工智能学院综测填报系统网站</h3>\n            <el-form\n                ref=\"loginFormRef\"\n                :model=\"loginForm\"\n                status-icon\n                :rules=\"loginRules\"\n                label-width=\"80px\"\n                class=\"loginform\"\n            >\n                <el-form-item\n                    label=\"用户名\"\n                    prop=\"username\"\n                >\n                    <el-input\n                        v-model=\"loginForm.username\"\n  \n                        autocomplete=\"off\"\n                    />\n                </el-form-item>\n                <el-form-item\n                    label=\"密码\"\n                    prop=\"password\"\n                >\n                    <el-input\n                        v-model=\"loginForm.password\"\n                        type=\"password\"\n                        autocomplete=\"off\"\n                    />\n                </el-form-item>\n                <el-form-item>\n                    <el-button\n                        type=\"primary\"\n                        @click=\"submitForm()\"\n                    >登录</el-button>  \n                </el-form-item>\n            </el-form>\n        </div>\n    </div>\n    <button @click=\"handleLogin\">按我获得跳转到子界面的权限</button>\n  </template>\n\n\n\n\n\n<script setup>\nimport {reactive,ref} from 'vue'\nimport {useRouter} from 'vue-router'\n//import axios from 'axios'// 引入axios\nimport { ElMessage } from 'element-plus'//消息提醒框\nimport {useStore } from 'vuex' // 引入全局store\n\nconst store = useStore()\nconst handleLogin = ()=>{\n    localStorage.setItem(\"token\",\"ForTest\")\n};\n\n// 表单绑定的响应式对象\nconst loginForm = reactive({\n  username:\"\",\n  password:\"\"\n})\nconst loginFormRef = ref() //表单的引用对象\n\n// 配置表单的验证规则\nconst loginRules = reactive({\n  username:[// 用户名\n    {\n      // 必须填入,表单提示,触发方式:失去焦点(判断是否通过表单验证)\n      required:true,message:\"请输入用户名\",trigger:\"blur\"\n    }\n  ],\n  password:[// 密码\n    {\n      required:true,message:\"请输入密码\",trigger:\"blur\"\n    }\n  ]\n})\n\n// 引入路由\nconst router = useRouter()\n//提交表单函数\nconst submitForm = ()=>{\n  //1. 校验表单(获取输入的表单数据)[validate为elementPlus中表单验证内置方法]\n  loginFormRef.value.validate((valid)=>{\n      console.log('判断输入的数据是否通过表单校验:',valid)// 手动校验表单是否有值\n      if(valid){\n          console.log('成功获取到表单内容:',loginForm)\n          axios.post('/adminapi/user/login',loginForm).then(res=>{\n            console.log(res.data);\n            // 登录校验\n            if(res.data.ActionType === 'OK'){\n              // console.log('返回的用户数据',res.data.data);\n              //store.commit(\"changeUserInfo\",res.data.data)// 将用户信息保存到vuex中\n              //store.commit(\"changeGetterRouter\",false)\n              router.push(\"/Report\")//路由跳转\n              // localStorage.setItem(\"token\", \"lam\");//色湖之token\n            }else{\n              ElMessage.error('用户名和密码不匹配')\n            }\n          })\n      }\n  })\n  //2. 拿到表单内容,提交后台\n\n  //3. 设置token\n  /*localStorage.setItem(\"token\", \"lam\");*/\n\n}\n</script>\n\n"],"mappings":";AAyDA,SAAQA,QAAQ,EAACC,GAAG,QAAO,KAAK;AAChC,SAAQC,SAAS,QAAO,YAAY;AACpC;AACA,SAASC,SAAS,QAAQ,cAAc;AACxC,SAAQC,QAAQ,QAAQ,MAAM,EAAC;;;;;;;;IAE/B,MAAMC,KAAK,GAAGD,QAAQ,CAAC,CAAC;IACxB,MAAME,WAAW,GAAGA,CAAA,KAAI;MACpBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAC,SAAS,CAAC;IAC3C,CAAC;;IAED;IACA,MAAMC,SAAS,GAAGT,QAAQ,CAAC;MACzBU,QAAQ,EAAC,EAAE;MACXC,QAAQ,EAAC;IACX,CAAC,CAAC;IACF,MAAMC,YAAY,GAAGX,GAAG,CAAC,CAAC,EAAC;;IAE3B;IACA,MAAMY,UAAU,GAAGb,QAAQ,CAAC;MAC1BU,QAAQ,EAAC;MAAC;MACR;QACE;QACAI,QAAQ,EAAC,IAAI;QAACC,OAAO,EAAC,QAAQ;QAACC,OAAO,EAAC;MACzC,CAAC,CACF;MACDL,QAAQ,EAAC;MAAC;MACR;QACEG,QAAQ,EAAC,IAAI;QAACC,OAAO,EAAC,OAAO;QAACC,OAAO,EAAC;MACxC,CAAC;IAEL,CAAC,CAAC;;IAEF;IACA,MAAMC,MAAM,GAAGf,SAAS,CAAC,CAAC;IAC1B;IACA,MAAMgB,UAAU,GAAGA,CAAA,KAAI;MACrB;MACAN,YAAY,CAACO,KAAK,CAACC,QAAQ,CAAEC,KAAK,IAAG;QACjCC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAACF,KAAK,CAAC;QACrC,IAAGA,KAAK,EAAC;UACLC,OAAO,CAACC,GAAG,CAAC,YAAY,EAACd,SAAS,CAAC;UACnCe,KAAK,CAACC,IAAI,CAAC,sBAAsB,EAAChB,SAAS,CAAC,CAACiB,IAAI,CAACC,GAAG,IAAE;YACrDL,OAAO,CAACC,GAAG,CAACI,GAAG,CAACC,IAAI,CAAC;YACrB;YACA,IAAGD,GAAG,CAACC,IAAI,CAACC,UAAU,KAAK,IAAI,EAAC;cAC9B;cACA;cACA;cACAZ,MAAM,CAACa,IAAI,CAAC,SAAS,CAAC;cACtB;YACF,CAAC,MAAI;cACH3B,SAAS,CAAC4B,KAAK,CAAC,WAAW,CAAC;YAC9B;UACF,CAAC,CAAC;QACN;MACJ,CAAC,CAAC;MACF;;MAEA;MACA;IAEF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}