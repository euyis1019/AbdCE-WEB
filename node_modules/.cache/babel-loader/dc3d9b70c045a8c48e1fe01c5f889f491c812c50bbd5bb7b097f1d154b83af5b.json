{"ast":null,"code":"import { getRandom } from \"tsparticles-engine\";\nexport class CircleShape {\n  randomPosition(position, size, fill) {\n    const generateTheta = (x, y) => {\n        const u = getRandom() / 4.0,\n          theta = Math.atan(y / x * Math.tan(2 * Math.PI * u)),\n          v = getRandom();\n        if (v < 0.25) {\n          return theta;\n        } else if (v < 0.5) {\n          return Math.PI - theta;\n        } else if (v < 0.75) {\n          return Math.PI + theta;\n        } else {\n          return -theta;\n        }\n      },\n      radius = (x, y, theta) => x * y / Math.sqrt((y * Math.cos(theta)) ** 2 + (x * Math.sin(theta)) ** 2),\n      [a, b] = [size.width / 2, size.height / 2],\n      randomTheta = generateTheta(a, b),\n      maxRadius = radius(a, b, randomTheta),\n      randomRadius = fill ? maxRadius * Math.sqrt(getRandom()) : maxRadius;\n    return {\n      x: position.x + randomRadius * Math.cos(randomTheta),\n      y: position.y + randomRadius * Math.sin(randomTheta)\n    };\n  }\n}","map":{"version":3,"names":["getRandom","CircleShape","randomPosition","position","size","fill","generateTheta","x","y","u","theta","Math","atan","tan","PI","v","radius","sqrt","cos","sin","a","b","width","height","randomTheta","maxRadius","randomRadius"],"sources":["/Users/eric/Documents/GitHub/AbdCE-WEB/node_modules/tsparticles-plugin-emitters/esm/Shapes/Circle/CircleShape.js"],"sourcesContent":["import { getRandom } from \"tsparticles-engine\";\nexport class CircleShape {\n    randomPosition(position, size, fill) {\n        const generateTheta = (x, y) => {\n            const u = getRandom() / 4.0, theta = Math.atan((y / x) * Math.tan(2 * Math.PI * u)), v = getRandom();\n            if (v < 0.25) {\n                return theta;\n            }\n            else if (v < 0.5) {\n                return Math.PI - theta;\n            }\n            else if (v < 0.75) {\n                return Math.PI + theta;\n            }\n            else {\n                return -theta;\n            }\n        }, radius = (x, y, theta) => (x * y) / Math.sqrt((y * Math.cos(theta)) ** 2 + (x * Math.sin(theta)) ** 2), [a, b] = [size.width / 2, size.height / 2], randomTheta = generateTheta(a, b), maxRadius = radius(a, b, randomTheta), randomRadius = fill ? maxRadius * Math.sqrt(getRandom()) : maxRadius;\n        return {\n            x: position.x + randomRadius * Math.cos(randomTheta),\n            y: position.y + randomRadius * Math.sin(randomTheta),\n        };\n    }\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,oBAAoB;AAC9C,OAAO,MAAMC,WAAW,CAAC;EACrBC,cAAcA,CAACC,QAAQ,EAAEC,IAAI,EAAEC,IAAI,EAAE;IACjC,MAAMC,aAAa,GAAGA,CAACC,CAAC,EAAEC,CAAC,KAAK;QAC5B,MAAMC,CAAC,GAAGT,SAAS,CAAC,CAAC,GAAG,GAAG;UAAEU,KAAK,GAAGC,IAAI,CAACC,IAAI,CAAEJ,CAAC,GAAGD,CAAC,GAAII,IAAI,CAACE,GAAG,CAAC,CAAC,GAAGF,IAAI,CAACG,EAAE,GAAGL,CAAC,CAAC,CAAC;UAAEM,CAAC,GAAGf,SAAS,CAAC,CAAC;QACpG,IAAIe,CAAC,GAAG,IAAI,EAAE;UACV,OAAOL,KAAK;QAChB,CAAC,MACI,IAAIK,CAAC,GAAG,GAAG,EAAE;UACd,OAAOJ,IAAI,CAACG,EAAE,GAAGJ,KAAK;QAC1B,CAAC,MACI,IAAIK,CAAC,GAAG,IAAI,EAAE;UACf,OAAOJ,IAAI,CAACG,EAAE,GAAGJ,KAAK;QAC1B,CAAC,MACI;UACD,OAAO,CAACA,KAAK;QACjB;MACJ,CAAC;MAAEM,MAAM,GAAGA,CAACT,CAAC,EAAEC,CAAC,EAAEE,KAAK,KAAMH,CAAC,GAAGC,CAAC,GAAIG,IAAI,CAACM,IAAI,CAAC,CAACT,CAAC,GAAGG,IAAI,CAACO,GAAG,CAACR,KAAK,CAAC,KAAK,CAAC,GAAG,CAACH,CAAC,GAAGI,IAAI,CAACQ,GAAG,CAACT,KAAK,CAAC,KAAK,CAAC,CAAC;MAAE,CAACU,CAAC,EAAEC,CAAC,CAAC,GAAG,CAACjB,IAAI,CAACkB,KAAK,GAAG,CAAC,EAAElB,IAAI,CAACmB,MAAM,GAAG,CAAC,CAAC;MAAEC,WAAW,GAAGlB,aAAa,CAACc,CAAC,EAAEC,CAAC,CAAC;MAAEI,SAAS,GAAGT,MAAM,CAACI,CAAC,EAAEC,CAAC,EAAEG,WAAW,CAAC;MAAEE,YAAY,GAAGrB,IAAI,GAAGoB,SAAS,GAAGd,IAAI,CAACM,IAAI,CAACjB,SAAS,CAAC,CAAC,CAAC,GAAGyB,SAAS;IACrS,OAAO;MACHlB,CAAC,EAAEJ,QAAQ,CAACI,CAAC,GAAGmB,YAAY,GAAGf,IAAI,CAACO,GAAG,CAACM,WAAW,CAAC;MACpDhB,CAAC,EAAEL,QAAQ,CAACK,CAAC,GAAGkB,YAAY,GAAGf,IAAI,CAACQ,GAAG,CAACK,WAAW;IACvD,CAAC;EACL;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}