import { defineComponent as a, nextTick as p, openBlock as d, createElementBlock as l } from "vue";
import { tsParticles as o } from "tsparticles-engine";
let e;
const u = a({
  props: {
    id: {
      type: String,
      required: !0
    },
    options: {
      type: Object
    },
    url: {
      type: String
    },
    particlesLoaded: {
      type: Function
    },
    particlesInit: {
      type: Function
    }
  },
  mounted() {
    p(async () => {
      if (!this.id)
        throw new Error("Prop 'id' is required!");
      o.init(), this.particlesInit && await this.particlesInit(o), e = await o.load({
        id: this.id,
        url: this.url,
        options: this.options
      }), this.particlesLoaded && e && this.particlesLoaded(e);
    });
  },
  unmounted() {
    e && (e.destroy(), e = void 0);
  }
}), f = (t, n) => {
  const i = t.__vccOpts || t;
  for (const [r, s] of n)
    i[r] = s;
  return i;
}, m = ["id"];
function h(t, n, i, r, s, _) {
  return d(), l("div", { id: t.id }, null, 8, m);
}
const c = /* @__PURE__ */ f(u, [["render", h]]), P = (t) => {
  t.component("Particles", c), t.component("vue-particles", c);
};
export {
  c as ParticlesComponent,
  P as default
};
